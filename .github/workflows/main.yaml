name: CI

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Greeting
        run: echo "Hello, world!"

      - name: Another greeting
        run: echo "Hello, world!"

  log-variable:
    runs-on: ubuntu-latest
    outputs:
      failures: ${{ steps.set-variable.outputs.fail_count }}
      report: ${{ steps.set-variable.outputs.fail_report }}
      report_1: ${{ steps.set-variable.outputs.fail_report_1 }}
      report_2: ${{ steps.set-variable.outputs.fail_report_2 }}

    steps:
      - uses: actions/checkout@v2

      - name: Set variable
        id: set-variable
        run: |
          set -eu

          # Use this env var to represent workspace dir on CI
          GITHUB_WORKSPACE=${GITHUB_WORKSPACE:-}

          # use this instead to represent workspace dir for local environment
          if [ "${GITHUB_WORKSPACE}" == "" ]; then
            BASE_DIR=$(pwd)
          else
            BASE_DIR="${GITHUB_WORKSPACE}"
          fi

          REPORT_DIR="${BASE_DIR}/"
          REPORT_FILE="index.json"

          # make sure report dir exists
          mkdir -p "${REPORT_DIR}"
          touch "${REPORT_DIR}/${REPORT_FILE}"

          function generate_report(){
            local full_report=""
            local limit=3
            local failures=`cat ${REPORT_FILE} | jq ".stats.failures"`

            local total_fails=$(cat ${REPORT_FILE} | jq ".stats.failures")
            local fail_results=$(cat ${REPORT_FILE} | jq -c ".results[].suites[] | select(.failures | length > 0)")
            local cypress_run_id=$(echo "${{ steps.run-integration.outputs.dashboardUrl }}" | sed "s:.*/::")

            jq -c ${fail_results} | while read -r i && [[ "$limit" != 0 ]]; do
              ((limit--))
              title=$(cat $i | jq '.tests[0].title')
              file=$(cat $i | jq '.fullFile')
              message=$(cat $i | jq '.tests[0].err.message')
              run_id=$(cat $i | jq '.uuid')
              report=$(echo ":test_tube:*TEST*: $title \n:open_file_folder:*FILE*: <https://cypress-dashboard.staging.manabie.io:31600/run/$cypress_run_id | $file> \n:speech_balloon:*MESSAGE*: $message \n")
              full_report+="$report \n"
              if [[ $limit == 0 ]]; then
                  full_report+="...showing 3 of ${failures} test fails"
              fi
              full_report=$(echo ${full_report//$'\n'/'%0A'} | sed 's/"//g')
              echo "::set-output name=fail_count::"${failures}""
              echo "::set-output name=fail_report::"${full_report}""
              echo ${full_report}
            done
          }

          pushd "${REPORT_DIR}"
            generate_report
          popd

      - name: Check report
        id: check-report
        run: |
          echo "${{ steps.set-variable.outputs.fail_report }} - +++FAILURESSS"

  slack-reporter:
    runs-on: ubuntu-latest
    needs:
      - build
      - log-variable

    steps:
      - name: Check variable
        id: check-variable
        run: |
          echo $PWD
          echo "${{ needs.log-variable.outputs.failures }} - +++FAILURESSS"
          echo "${{ needs.log-variable.outputs.report }} - +++REPORT"
          echo "${{ needs.log-variable.outputs.report_1 }} - +++REPORT 1"
          echo "${{ needs.log-variable.outputs.report_2 }} - +++REPORT 2"
          pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=pull-request-number::"${pull_number}""

      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.18.0
        with:
          # For posting a rich message using Block Kit
          payload-file-path: "${GITHUB_WORKSPACE}/.github/workflows/slack-payload.json"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
